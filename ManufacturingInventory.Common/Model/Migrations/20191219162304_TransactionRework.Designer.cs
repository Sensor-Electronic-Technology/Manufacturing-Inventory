// <auto-generated />
using System;
using ManufacturingInventory.Common.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ManufacturingInventory.Common.Migrations
{
    [DbContext(typeof(ManufacturingContext))]
    [Migration("20191219162304_TransactionRework")]
    partial class TransactionRework
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AlertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("PartInstanceId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("PartInstanceId");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistributorId")
                        .HasColumnType("int");

                    b.Property<bool>("Expires")
                        .HasColumnType("bit");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartId")
                        .HasColumnType("int");

                    b.Property<int?>("PartInstanceId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SourceReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ValidThough")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DistributorId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PartId");

                    b.HasIndex("PartInstanceId");

                    b.HasIndex("PriceId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.BubblerParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateInstalled")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRemoved")
                        .HasColumnType("datetime2");

                    b.Property<double>("GrossWeight")
                        .HasColumnType("float");

                    b.Property<double>("Measured")
                        .HasColumnType("float");

                    b.Property<double>("NetWeight")
                        .HasColumnType("float");

                    b.Property<double>("Tare")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("BubblerParameters");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Category");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistributorId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistributorId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Distributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Distributors");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.InstanceParameter", b =>
                {
                    b.Property<int>("PartInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("ParameterId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("MinValue")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double>("SafeValue")
                        .HasColumnType("float");

                    b.Property<bool>("Tracked")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("PartInstanceId", "ParameterId");

                    b.HasIndex("ParameterId");

                    b.ToTable("InstanceParameters");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Location");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HoldsBubblers")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OgranizationId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("UsageId")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OgranizationId");

                    b.HasIndex("UsageId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.PartInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BatchNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BubblerParameterId")
                        .HasColumnType("int");

                    b.Property<int?>("ConditionId")
                        .HasColumnType("int");

                    b.Property<bool>("CostReported")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBubbler")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResuable")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("MinQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<int?>("PartTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SafeQuantity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkuNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.Property<double>("UnitCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BubblerParameterId")
                        .IsUnique()
                        .HasFilter("[BubblerParameterId] IS NOT NULL");

                    b.HasIndex("ConditionId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PartId");

                    b.HasIndex("PartTypeId");

                    b.ToTable("PartInstances");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.PartManufacturer", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PartId", "ManufacturerId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("PartManufacturers");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Full Inventory Privileges and User Control",
                            Name = "InventoryAdminAccount"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Inventory View Only",
                            Name = "InventoryUserAccount"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Full Inventory Privileges",
                            Name = "InventoryUserFullAccount"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Inventory Check In/Check Out/Create",
                            Name = "InventoryUserLimitedAccount"
                        });
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DistributorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<double>("LeadTime")
                        .HasColumnType("float");

                    b.Property<int>("MinOrder")
                        .HasColumnType("int");

                    b.Property<int>("PartInstanceId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<double>("UnitCost")
                        .HasColumnType("float");

                    b.Property<DateTime?>("VaildFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DistributorId");

                    b.HasIndex("PartInstanceId")
                        .IsUnique();

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("In")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Out")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("InstanceParameterValue")
                        .HasColumnType("float");

                    b.Property<int>("InventoryAction")
                        .HasColumnType("int");

                    b.Property<bool>("IsReturning")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("OutgoingTransactionId")
                        .HasColumnType("int");

                    b.Property<double>("ParameterValue")
                        .HasColumnType("float");

                    b.Property<int>("PartInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("OutgoingTransactionId")
                        .IsUnique()
                        .HasFilter("[OutgoingTransactionId] IS NOT NULL");

                    b.HasIndex("PartInstanceId");

                    b.HasIndex("SessionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Exponent")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncryptedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("IV")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Key")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("StorePassword")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Andrew",
                            LastName = "Elmendorf",
                            PermissionId = 1,
                            StorePassword = false,
                            UserName = "AElmendo"
                        });
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.UserAlert", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("AlertId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("UserId", "AlertId");

                    b.HasIndex("AlertId");

                    b.ToTable("UserAlerts");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Condition", b =>
                {
                    b.HasBaseType("ManufacturingInventory.Common.Model.Entities.Category");

                    b.HasDiscriminator().HasValue("Condition");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Organization", b =>
                {
                    b.HasBaseType("ManufacturingInventory.Common.Model.Entities.Category");

                    b.HasDiscriminator().HasValue("Organization");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.PartType", b =>
                {
                    b.HasBaseType("ManufacturingInventory.Common.Model.Entities.Category");

                    b.HasDiscriminator().HasValue("PartType");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Usage", b =>
                {
                    b.HasBaseType("ManufacturingInventory.Common.Model.Entities.Category");

                    b.HasDiscriminator().HasValue("Usage");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Consumer", b =>
                {
                    b.HasBaseType("ManufacturingInventory.Common.Model.Entities.Location");

                    b.HasDiscriminator().HasValue("Consumer");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Warehouse", b =>
                {
                    b.HasBaseType("ManufacturingInventory.Common.Model.Entities.Location");

                    b.HasDiscriminator().HasValue("Warehouse");
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Alert", b =>
                {
                    b.HasOne("ManufacturingInventory.Common.Model.Entities.PartInstance", "PartInstance")
                        .WithMany()
                        .HasForeignKey("PartInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Attachment", b =>
                {
                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Distributor", "Distributor")
                        .WithMany("Attachments")
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Attachments")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Part", "Part")
                        .WithMany("Attachments")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ManufacturingInventory.Common.Model.Entities.PartInstance", "PartInstance")
                        .WithMany("Attachments")
                        .HasForeignKey("PartInstanceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Price", "Price")
                        .WithMany("Attachments")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Contact", b =>
                {
                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Distributor", "Distributor")
                        .WithMany("Contacts")
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Contacts")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.InstanceParameter", b =>
                {
                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Parameter", "Parameter")
                        .WithMany("InstanceParameters")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ManufacturingInventory.Common.Model.Entities.PartInstance", "PartInstance")
                        .WithMany()
                        .HasForeignKey("PartInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Parameter", b =>
                {
                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Unit", "Unit")
                        .WithMany("Parameters")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Part", b =>
                {
                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Organization", "Organization")
                        .WithMany("Parts")
                        .HasForeignKey("OgranizationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Usage", "Usage")
                        .WithMany("Parts")
                        .HasForeignKey("UsageId");

                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Warehouse", "Warehouse")
                        .WithMany("StoredParts")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.PartInstance", b =>
                {
                    b.HasOne("ManufacturingInventory.Common.Model.Entities.BubblerParameter", "BubblerParameter")
                        .WithOne("PartInstance")
                        .HasForeignKey("ManufacturingInventory.Common.Model.Entities.PartInstance", "BubblerParameterId");

                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Condition", "Condition")
                        .WithMany("PartInstances")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Location", "CurrentLocation")
                        .WithMany("ItemsAtLocation")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Part", "Part")
                        .WithMany("PartInstances")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ManufacturingInventory.Common.Model.Entities.PartType", "PartType")
                        .WithMany("PartInstances")
                        .HasForeignKey("PartTypeId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.PartManufacturer", b =>
                {
                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Manufacturer", "Manufacturer")
                        .WithMany("PartManufacturers")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Part", "Part")
                        .WithMany("PartManufacturers")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Price", b =>
                {
                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Distributor", "Distributor")
                        .WithMany("Prices")
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ManufacturingInventory.Common.Model.Entities.PartInstance", "PartInstance")
                        .WithOne("Price")
                        .HasForeignKey("ManufacturingInventory.Common.Model.Entities.Price", "PartInstanceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Session", b =>
                {
                    b.HasOne("ManufacturingInventory.Common.Model.Entities.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.Transaction", b =>
                {
                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Location", "Location")
                        .WithMany("Transactions")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Transaction", "OutgoingTransaction")
                        .WithOne()
                        .HasForeignKey("ManufacturingInventory.Common.Model.Entities.Transaction", "OutgoingTransactionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ManufacturingInventory.Common.Model.Entities.PartInstance", "PartInstance")
                        .WithMany("Transactions")
                        .HasForeignKey("PartInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Session", "Session")
                        .WithMany("Transactions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.User", b =>
                {
                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Permission", "Permission")
                        .WithMany("Users")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("ManufacturingInventory.Common.Model.Entities.UserAlert", b =>
                {
                    b.HasOne("ManufacturingInventory.Common.Model.Entities.Alert", "Alert")
                        .WithMany("UserAlerts")
                        .HasForeignKey("AlertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ManufacturingInventory.Common.Model.Entities.User", "User")
                        .WithMany("UserAlerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
